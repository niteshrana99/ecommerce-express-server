// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store {
  id        String     @id @default(uuid())
  name      String
  userId    String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  billboard Billboard[]
  category Category[]
  size Size[]
  color Color[]
  product Product[]
  orders Order[]
}

model Billboard {
  id              String @id @default(uuid())
  label           String
  backgroundImage String
  store           Store  @relation(fields: [storeId], references: [id])
  storeId         String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  Category Category[]

  @@index([storeId])
}

model Category {
  id String @id @default(uuid())
  name String
  store Store @relation(fields: [storeId], references: [id])
  storeId String
  billboard Billboard @relation(fields: [billboardId], references: [id])
  billboardId  String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  product Product[]

  @@index([storeId])
  @@index([billboardId])
}

model Size {
 id String @id @default(uuid())
 name String
 value String
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
 store Store @relation(fields: [storeId], references: [id])
 storeId String
 product Product[]

 @@index([storeId])
}

model Color {
 id String @id @default(uuid())
 name String
 value String
 createdAt DateTime @default(now())
 updatedAt DateTime @updatedAt
 store Store @relation(fields: [storeId], references: [id])
 storeId String
 product Product[]

 @@index([storeId])
}

model Product {
  id String @id @default(uuid())
  storeId String
  store Store @relation(fields: [storeId], references: [id])
  categoryId String
  category Category @relation(fields: [categoryId], references: [id])
  name String
  price Decimal
  isFeatured Boolean @default(false)
  isArchived Boolean @default(false)
  sizeId String
  size Size @relation(fields: [sizeId], references: [id])
  colorId String
  color Color @relation(fields: [colorId], references: [id])
  images Image[]
  orderItems OrderItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id String @id @default(uuid())
  productId String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
  id String @id @default(uuid())
  storeId String
  store Store @relation(fields: [storeId], references: [id])
  orderItems OrderItem[]
  isPaid Boolean @default(false)
  phone String @default("")
  address String @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model OrderItem {
  id String @id @default(uuid())
  orderId String
  order Order @relation(fields: [orderId], references: [id])
  productId String
  product Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
}